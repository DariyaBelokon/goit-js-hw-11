{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","username","newUsers","map","user","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","promise","rejected","id","logSuccess","logError","warn","amount","then","catch"],"mappings":";AACA,MAAMA,EAAQC,GACL,IAAIC,QAASC,GAAYC,WAAW,KAAOD,EAAQF,IAAMA,IAI5DI,EAASC,GAAQC,QAAQC,uBAAuBF,OAQhDG,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAapBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAWF,EAASG,IAAIC,GAC5BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGxDf,OAAAA,QAAQC,QAAQY,IAgCnBG,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAmBC,IAgBhBC,OAdS,IAAIxB,QAAQ,CAACC,EAASwB,KAE9B3B,MAAAA,EAAQkB,EAA0B,IAAK,KAE/Cd,WAAW,KACUiB,KAAKE,SAAW,GAGjCpB,EAAQ,CAAEyB,GAAIH,EAAYG,GAAItB,KAAMN,IAEpC2B,EAAUF,EAAYG,KAEvB5B,MAKC6B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACxBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG1CwB,EAAWF,IACfrB,QAAQwB,qCAAqCH,+BAS/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,KAAMC,KAAKJ,GAAYK,MAAMJ,GAC/DN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOC,KAAKJ,GAAYK,MAAMJ","file":"03-promisify.03d2234b.js","sourceRoot":"../src","sourcesContent":["// ======================= Subtask 1 =======================\nconst delay = ms => {\n  return new Promise((resolve) => setTimeout(() => {resolve(ms)}, ms)\n  )\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\n// delay(2000).then(logger); // Fulfilled after 2000ms\n// delay(1000).then(logger); // Fulfilled after 1000ms\n// delay(1500).then(logger); // Fulfilled after 1500ms\n\n// ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n// const toggleUserState = (allUsers, username, callback) => {\n//   const updatedUsers = allUsers.map(user =>\n//     user.name === username ? { ...user, active: !user.active } : user\n//   );\n\n//   callback(updatedUsers);\n// };\n\n\n\nconst toggleUserState = (allUsers, username) => {\n  const newUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user\n  );\n\n  return Promise.resolve(newUsers);\n}\n\n\n// toggleUserState.then(\n//   result => { console.table(result) },\n//   )\n\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\n// toggleUserState(users, 'Mango').then(console.table);\n// toggleUserState(users, 'Ajax').then(console.table);\n\n// ======================= Subtask 3 =======================\n\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\n// makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n// makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  \n  const promise = new Promise((resolve, rejected) => {\n    \n    const delay = randomIntegerFromInterval(200, 500);\n\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n     if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      rejected (transaction.id);\n    }\n  }, delay);\n  })\n  return promise;\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"]}